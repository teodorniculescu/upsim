#0 Improve coding style - DONE
Set PyCharm line indent to 80.
Format all files in order to satisfy this criteria.

#1 Switch .result to CSV format - DONE
Change the way .result files are represented to a CSV style.

#2 Generate tables from .result files - TODO
Use a python library to generate a table from the .csv results, similar to how
SQL databases do it.

#3 Start SYNTAX description in README file - DONE -> #26
Define syntactically correct inputs in README.

#4 Errors for incorrect inputs - DONE
Create / Modify a wrapper in order to raise Exceptions if incorrect inputs are
inserted.

#5 Tests for incorrect inputs - DONE
Create tests that check if the input is correct
- create block with an already existing name - be careful to be across all types
of blocks - DONE
- create pin with an already existing name inside that block - DONE
- vertex added to simulation already exists - DONE
- vertex (node) specified does not exist either the name or pin is
invalid - DONE
- edge added to simulation already exists - DONE
- invalid value for initial condition
- add command which specifies the type of error that is expected to happen
 EXPECT ERROR <error number> - DONE
- if you are expecting an error and you don't receive it, raise an exception -
DONE

#6 Compare .result files to .answer files - DONE
Each result will be compare to an .answer file which contains the result which
is expected to be the correct one. If the files differ, then it means that
something is not correct in the code (either newly added code somehow breaks old
code results or something else happened)

#7.1 Add all possible logic gates simple logic gates - DONE
Add 1 input and 1 output (1I1O) logic gate: NOT
Add 2 input and 1 output (2I1O) logic gates: AND / OR / NAND / NOR / XOR / XNOR
Create tests for these logic gates.

#8 Logic gates with indefinite amounts of inputs - DONE
Create and test simple logic gates that can take as many inputs as possible
without hard coding the number of inputs.
n input 1 output logic gates - AND / OR / etc same as in #7

#9 Combinational logic circuits - TODO
Implement and test multiplexers and adders (half and full).
1st implementation: without logic gates - with code
2nd implementation: with logic gates - the module is created not by code which
is executed in the calc function but by executing individual logic gates which
are inside the module

#10 Sequential logic circuits - TODO
Implement and test SR Latch and JK Bistable
same as in #9, with and without logic gates

#11 Implement configurable logic block - TODO
Implement and test a CLB

#12 RUN syntax toggle each step - DONE
Specify in the RUN command syntax if you either want to see each step in the
simulation which includes the SSN steps or only the main steps when the output
is determined.

#13 Move documentation from google docs to README - TODO

#14 Improve edge storage - TODO
Only put in the edges dictionary the following combinations on vertices:
input : output
io : io
input : io
io : output
The reason is quite simple, reading starts only from input pins, so there is no
need for entries starting with an output pin

#15 RUN specify SSN on/off - DONE
Specify whether you what each vertex modification across a single time step
(SSN) or you only need the final values in the CSV file

#16 Add comments in .test files - DONE

#17 Create Node class - DONE
Simply code from simulation class and remove repetitive lines by creating a node
class which contains information about the block and pin name of that node.

#18 Create graph class - DONE
Move edges and nodes to a class which operates only on them in order to simplify
simulation class

#19 Create BlockHandler class - DONE
Move blocks to a different class in order to simplify simulation class and move
all code related to blocks to its own file

#20 Remove need to specify state block pin name - DONE
Change syntax in order to avoid needing to input a name for the state block
input. Default state block pin name will be "value".

#21 Add DECLARE BLOCK syntax in order to create blocks from other blocks - TODO
Also add some way to extract result of a run with some initial conditions from
the block.
Create a way to combine .py declaration with a file which contains DECLARE BLOCK
statements!

#22 Add way to assign and declare a cluster / vector of blocks - TODO
Way to add and connect multiple blocks at the same time with [n] syntax.

#23 Create ALU - TODO
1 bit ALU and multiple bit ALU from Computer Organization and Design

#24 Add import syntax in order to reuse blocks - TODO

#25 Make if possible to only connect from output to input - TODO

#26 github website - TODO
Create website to showcase this project and add the following things:
 - blog entries & updates
 - upsim syntax

#27 Flip flops - TODO
Implement RS, JK, D, T flip flops
