INSERT BLOCKS
    STATE OUT A,
    STATE OUT B,
    STATE OUT C,
    STATE IN andResult,
    STATE IN orResult,
    STATE IN norResult,
    STATE IN nandResult,
    STATE IN xorResult,
    STATE IN xnorResult,
    OR or inA inB inC out,
    NOR nor inA inB inC out,
    AND and inA inB inC out,
    NAND nand inA inB inC out,
    XOR xor inA inB inC out,
    XNOR xnor inA inB inC out;

INSERT EDGES
    BTWN A.val AND (and.inA, or.inA, nand.inA, nor.inA, xor.inA, xnor.inA),
    BTWN B.val AND (and.inB, or.inB, nand.inB, nor.inB, xor.inB, xnor.inB),
    BTWN C.val AND (and.inC, or.inC, nand.inC, nor.inC, xor.inC, xnor.inC),
    BTWN and.out AND andResult.val,
    BTWN or.out AND orResult.val,
    BTWN nor.out AND norResult.val,
    BTWN nand.out AND nandResult.val,
    BTWN xor.out AND xorResult.val,
    BTWN xnor.out AND xnorResult.val;

INSERT INITIAL CONDITIONS
    (A.val=0, B.val=0, C.val=0),
    (A.val=0, B.val=0, C.val=1),
    (A.val=0, B.val=1, C.val=0),
    (A.val=0, B.val=1, C.val=1),
    (A.val=1, B.val=0, C.val=0),
    (A.val=1, B.val=0, C.val=1),
    (A.val=1, B.val=1, C.val=0),
    (A.val=1, B.val=1, C.val=1);

RUN;

SHOW RUN (A.val, B.val, C.val, andResult.val);
SHOW RUN (A.val, B.val, C.val, orResult.val);
SHOW RUN (A.val, B.val, C.val, norResult.val);
SHOW RUN (A.val, B.val, C.val, nandResult.val);
SHOW RUN (A.val, B.val, C.val, xorResult.val);
SHOW RUN (A.val, B.val, C.val, xnorResult.val);
